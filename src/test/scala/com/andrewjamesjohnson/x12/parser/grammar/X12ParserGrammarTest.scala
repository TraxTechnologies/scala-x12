package com.andrewjamesjohnson.x12.parser.grammar

import org.specs2.mutable.Specification

import scala.io.Source

class X12ParserGrammarTest extends Specification {
  "X12ParserGrammar" should {
    "parse an X12 document" in {
      val input = Source.fromURL(getClass.getResource("/example835.txt")).mkString
      val parser = X12ParserGrammar("~", "*", ":")
      val result = parser.parseX12(input)

      val expected = DocumentNode(List(SegmentNode(List(ElementNode(List(ValueNode("ISA"))), ElementNode(List(ValueNode("00"))), ElementNode(List(ValueNode("          "))), ElementNode(List(ValueNode("00"))), ElementNode(List(ValueNode("          "))), ElementNode(List(ValueNode("ZZ"))), ElementNode(List(ValueNode("SENDERID       "))), ElementNode(List(ValueNode("ZZ"))), ElementNode(List(ValueNode("RECEIVERID    "))), ElementNode(List(ValueNode("030409"))), ElementNode(List(ValueNode("0701"))), ElementNode(List(ValueNode("U"))), ElementNode(List(ValueNode("00401"))), ElementNode(List(ValueNode("0000000001"))), ElementNode(List(ValueNode("0"))), ElementNode(List(ValueNode("T"))), ElementNode(List(ValueNode(":"))))), SegmentNode(List(ElementNode(List(ValueNode("GS"))), ElementNode(List(ValueNode("1212"))), ElementNode(List(ValueNode("SENDERID"))), ElementNode(List(ValueNode("RECEIVERID"))), ElementNode(List(ValueNode("0701"))), ElementNode(List(ValueNode("000000001"))), ElementNode(List(ValueNode("X"))), ElementNode(List(ValueNode("00401"))))), SegmentNode(List(ElementNode(List(ValueNode("ST"))), ElementNode(List(ValueNode("835"))), ElementNode(List(ValueNode("000000001"))))), SegmentNode(List(ElementNode(List(ValueNode("BPR"))), ElementNode(List(ValueNode("DATA"))), ElementNode(List(ValueNode("NOT"))), ElementNode(List(ValueNode("VALID"))), ElementNode(List(ValueNode("RANDOM"))), ElementNode(List(ValueNode("TEXT"))))), SegmentNode(List(ElementNode(List(ValueNode("TRN"))), ElementNode(List(ValueNode("1"))), ElementNode(List(ValueNode("0000000000"))), ElementNode(List(ValueNode("1999999999"))))), SegmentNode(List(ElementNode(List(ValueNode("DTM"))), ElementNode(List(ValueNode("111"))), ElementNode(List(ValueNode("20090915"))))), SegmentNode(List(ElementNode(List(ValueNode("TST"))), ElementNode(List(ValueNode("a"), ValueNode("b"), ValueNode("c"))))), SegmentNode(List(ElementNode(List(ValueNode("N1"))), ElementNode(List(ValueNode("PR"))), ElementNode(List(ValueNode("ALWAYS INSURANCE COMPANY"))))), SegmentNode(List(ElementNode(List(ValueNode("N7"))), ElementNode(List(ValueNode("AROUND THE CORNER"))))), SegmentNode(List(ElementNode(List(ValueNode("N4"))), ElementNode(List(ValueNode("SHINE CITY"))), ElementNode(List(ValueNode("GREEN STATE"))), ElementNode(List(ValueNode("ZIP"))))), SegmentNode(List(ElementNode(List(ValueNode("REF"))), ElementNode(List(ValueNode("DT"))), ElementNode(List(ValueNode("435864864"))))), SegmentNode(List(ElementNode(List(ValueNode("N1"))), ElementNode(List(ValueNode("PE"))), ElementNode(List(ValueNode("FI"))), ElementNode(List(ValueNode("888888888"))), ElementNode(List(ValueNode("P.O.BOX 456"))), ElementNode(List(ValueNode("SHINE CITY"))), ElementNode(List(ValueNode("GREEN STATE"))), ElementNode(List(ValueNode("ZIP"))), ElementNode(List(ValueNode("EARTH"))))), SegmentNode(List(ElementNode(List(ValueNode("LX"))), ElementNode(List(ValueNode("1"))))), SegmentNode(List(ElementNode(List(ValueNode("CLP"))), ElementNode(List(ValueNode("PCN123456789"))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode("5555.55"))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode("CCN987654321"))))), SegmentNode(List(ElementNode(List(ValueNode("CAS"))), ElementNode(List(ValueNode("PR"))), ElementNode(List(ValueNode("909099"))), ElementNode(List(ValueNode("100.00"))))), SegmentNode(List(ElementNode(List(ValueNode("NM1"))), ElementNode(List(ValueNode("QC"))), ElementNode(List(ValueNode("1"))), ElementNode(List(ValueNode("PATIENT"))), ElementNode(List(ValueNode("TREATED"))), ElementNode(List(ValueNode("ONE"))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode("34"))), ElementNode(List(ValueNode("333333333"))))), SegmentNode(List(ElementNode(List(ValueNode("DTM"))), ElementNode(List(ValueNode("273"))), ElementNode(List(ValueNode("20020824"))))), SegmentNode(List(ElementNode(List(ValueNode("AMT"))), ElementNode(List(ValueNode("A1"))), ElementNode(List(ValueNode("10.10"))))), SegmentNode(List(ElementNode(List(ValueNode("AMT"))), ElementNode(List(ValueNode("A2"))), ElementNode(List(ValueNode("20.20"))))), SegmentNode(List(ElementNode(List(ValueNode("LX"))), ElementNode(List(ValueNode("2"))))), SegmentNode(List(ElementNode(List(ValueNode("CLP"))), ElementNode(List(ValueNode("PCN123456789"))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode("4444.44"))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode("CCN987654321"))))), SegmentNode(List(ElementNode(List(ValueNode("CAS"))), ElementNode(List(ValueNode("PR"))), ElementNode(List(ValueNode("909099"))), ElementNode(List(ValueNode("200.00"))))), SegmentNode(List(ElementNode(List(ValueNode("NM1"))), ElementNode(List(ValueNode("QC"))), ElementNode(List(ValueNode("1"))), ElementNode(List(ValueNode("PATIENT"))), ElementNode(List(ValueNode("TREATED"))), ElementNode(List(ValueNode("TWO"))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode(""))), ElementNode(List(ValueNode("34"))), ElementNode(List(ValueNode("444444444"))))), SegmentNode(List(ElementNode(List(ValueNode("DTM"))), ElementNode(List(ValueNode("273"))), ElementNode(List(ValueNode("20020824"))))), SegmentNode(List(ElementNode(List(ValueNode("AMT"))), ElementNode(List(ValueNode("A1"))), ElementNode(List(ValueNode("30.30"))))), SegmentNode(List(ElementNode(List(ValueNode("AMT"))), ElementNode(List(ValueNode("A2"))), ElementNode(List(ValueNode("40.40"))))), SegmentNode(List(ElementNode(List(ValueNode("SE"))), ElementNode(List(ValueNode("24"))), ElementNode(List(ValueNode("000000001"))))), SegmentNode(List(ElementNode(List(ValueNode("GE"))), ElementNode(List(ValueNode("1"))), ElementNode(List(ValueNode("000000001"))))), SegmentNode(List(ElementNode(List(ValueNode("IEA"))), ElementNode(List(ValueNode("1"))), ElementNode(List(ValueNode("000000001"))))), SegmentNode(List(ElementNode(List(ValueNode("")))))))

      result mustEqual expected
    }
  }
}
